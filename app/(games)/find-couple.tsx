import { StatusBar } from "expo-status-bar";
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç StatusBar –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Expo –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.

import { COLORS } from "@/constants/colors";
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç COLORS, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω—è—Ç—Å—è —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

import styled from "styled-components/native";
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º styled-components –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é CSS –≤ React Native.

import CardMemoryGame from "@/components/cardMemoryGame/CardMemoryGame";
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç CardMemoryGame, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è –∏–≥—Ä—ã.

import { generateCards } from "@/helpers/generateCards";
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é generateCards, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞—ë—Ç –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –∏–≥—Ä—ã.

import { useEffect, useState } from "react";
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö—É–∫–∏ useEffect –∏ useState –∏–∑ React –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ –ø–æ–±–æ—á–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏.

export default function FindCouple() {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç FindCouple –¥–ª—è –∏–≥—Ä—ã "–ù–∞–π–¥–∏ –ø–∞—Ä—É".

    const gameArray = ['üêµ', 'üêí', 'ü¶ç', 'ü¶ß', 'üê∂', 'üêï'];
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ gameArray —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ –∏–≥—Ä–µ.

    const [cards, setCards] = useState(generateCards(gameArray));
    // –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ cards —Å –ø–æ–º–æ—â—å—é useState –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ñ—É–Ω–∫—Ü–∏–∏ generateCards, –∫–æ—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç –∏–∑ gameArray.

    const [flippedIndices, setFlippedIndices] = useState<number[]>([]);
    // –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ flippedIndices –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç (–º–∞–∫—Å–∏–º—É–º –¥–≤—É—Ö) –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º.

    useEffect(() => {
        // useEffect –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ–≥–¥–∞ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ flippedIndices.

        if (flippedIndices.length === 2) {
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ —Ä–æ–≤–Ω–æ –¥–≤–µ –∫–∞—Ä—Ç—ã, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.

            const [firstIndex, secondIndex] = flippedIndices;
            // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º flippedIndices –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–≤—É—Ö –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç.

            if (cards[firstIndex].value === cards[secondIndex].value) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç –ø–æ —ç—Ç–∏–º –∏–Ω–¥–µ–∫—Å–∞–º.

                setCards(prevCards => {
                    const newCards = [...prevCards];
                    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ –∫–∞—Ä—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è.

                    newCards[firstIndex].matched = true;
                    newCards[secondIndex].matched = true;
                    // –ï—Å–ª–∏ –∫–∞—Ä—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç, –æ—Ç–º–µ—á–∞–µ–º –∏—Ö –∫–∞–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ (matched = true).

                    return newCards;
                    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
                });
            }

            setTimeout(() => {
                // –ó–∞–¥–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ 500 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—ã—Ö –∫–∞—Ä—Ç.

                setFlippedIndices([]);
                // –û—á–∏—â–∞–µ–º flippedIndices, —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞—Ä—Ç.

                setCards(prevCards =>
                    prevCards.map(card => ({ ...card, flipped: card.matched || false }))
                );
                // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞—Ä—Ç—ã: –µ—Å–ª–∏ –∫–∞—Ä—Ç–∞ —Å–æ–≤–ø–∞–≤—à–∞—è (matched), –æ—Å—Ç–∞–≤–ª—è–µ–º –µ—ë –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–π, –∏–Ω–∞—á–µ —Å–∫—Ä—ã–≤–∞–µ–º.
            }, 500);
        }
    }, [flippedIndices]);
    // useEffect —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è flippedIndices, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–∞—Ä—Ç.

    const handleCardPress = (index: number) => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handleCardPress, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–∞—Ä—Ç—É.

        if (flippedIndices.length < 2 && !cards[index].flipped && !cards[index].matched) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ –º–µ–Ω–µ–µ –¥–≤—É—Ö –∫–∞—Ä—Ç, –∏ —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–ª–∞ —Ä–∞–Ω–µ–µ –∏ –Ω–µ –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞ —Å–µ–π—á–∞—Å.

            setCards(prevCards => {
                const newCards = [...prevCards];
                // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ –∫–∞—Ä—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è.

                newCards[index].flipped = true;
                // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É, –∏–∑–º–µ–Ω—è—è –µ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ flipped –Ω–∞ true.

                return newCards;
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –∫–∞—Ä—Ç, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
            });

            setFlippedIndices(prev => [...prev, index]);
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–æ–π –∫–∞—Ä—Ç—ã –≤ –º–∞—Å—Å–∏–≤ flippedIndices.
        }
    };

    return (
        <>
            <GameBoard style={{ paddingTop: '25%' }}>
                {cards.map((card, index) => (
                    <CardMemoryGame
                        key={card.id}
                        value={card.value}
                        flipped={card.flipped || card.matched}
                        onPressHandler={() => handleCardPress(index)}
                    />
                ))}
            </GameBoard>
            {/* –í—ã–≤–æ–¥–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç GameBoard, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–æ—Å–∫—É –¥–ª—è –∏–≥—Ä—ã.
                –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã —Å–æ–∑–¥–∞—ë–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç CardMemoryGame –∏ –ø–µ—Ä–µ–¥–∞–µ–º:
                 - –∫–ª—é—á card.id
                 - –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã (card.value)
                 - —Å–æ—Å—Ç–æ—è–Ω–∏–µ flipped, –∑–∞–≤–∏—Å—è—â–µ–µ –æ—Ç —Ñ–ª–∞–≥–∞ –∫–∞—Ä—Ç—ã (flipped || matched)
                 - –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è, –≤—ã–∑—ã–≤–∞—é—â–∏–π handleCardPress —Å –∏–Ω–¥–µ–∫—Å–æ–º –∫–∞—Ä—Ç—ã.
            */}

            <StatusBar backgroundColor="#161622" style="light" />
            {/* –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ StatusBar –æ—Ç Expo */}
        </>
    );
};

const GameBoard = styled.SafeAreaView`
    height: 100%;
    flex-grow: 1;
    flex-direction: row;
    padding: 15px;
    gap: 10px;
    align-items: center;
    justify-content: center;
    flex-wrap: wrap;
    background-color: ${COLORS.background};
    color: #CDCDE0;
`;
// –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç GameBoard:
// - –ó–∞–¥–∞–µ—Ç –≤—ã—Å–æ—Ç—É –∏ —Å—Ç–∏–ª—å Flexbox –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç.
// - –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç COLORS –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏.
